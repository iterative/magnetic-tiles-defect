name: Train
on:
  push:
    # don't run on `main` and `dev` commits
    branches-ignore: [main, dev]
jobs:
  deploy-runner:
    runs-on: ubuntu-latest
    environment: cloud
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v3
      - uses: iterative/setup-cml@v1
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::342840881361:role/SandboxUser
      - name: deploy
        env:
          # set these secrets via gh CLI or UI. See also:
          # https://cml.dev/doc/self-hosted-runners?tab=GitHub#personal-access-token
          REPO_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          cml runner \
              --cloud=aws \
              --cloud-region=us-east-1 \
              --cloud-type=g4dn.xlarge \
              --labels=cml-runner
  train-model:
    needs: deploy-runner
    runs-on: [self-hosted, cml-runner]
    container:
      image: iterativeai/cml:0-dvc2-base1
      options: --gpus all
    environment: cloud
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/setup-python@v2
        with:
          python-version: "3.9"
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::342840881361:role/SandboxUser
      - name: Setup Git User
        run: cml ci
        env:
          REPO_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Install pipenv
        run: |
          pip install pipenv
          echo "PYTHONPATH=${GITHUB_WORKSPACE}" >> $GITHUB_ENV
      - name: dvc-repro-cml
        env:
          # set these secrets via gh CLI or UI. See also:
          # https://cml.dev/doc/self-hosted-runners?tab=GitHub#personal-access-token
          REPO_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          # Install dependencies
          pipenv install --skip-lock
          pipenv run dvc pull
          pipenv run dvc repro
          pipenv run dvc push

          # Create CML report
          echo "## Metrics" >> report.md
          pipenv run dvc metrics show --md >> report.md
          echo "## A few random test images" >> report.md
          for file in $(ls data/test_preds/ |sort -R |tail -20); do
            cml publish data/test_preds/$file --md >> report.md
          done
          cml send-comment report.md
